  Fast Graph Format (FGF)
===========================

A part of the "Blueprints Extensions" package.

Version: 1.0
URL    : https://code.google.com/p/blueprints-extensions/
Author : Peter Macko (pmacko at eecs dot harvard dot edu)


  Introduction
----------------

Fast Graph Format (FGF) is a novel binary format for storing graphs developed
in order to enable efficient loading and exporting of graphs, especially when
using Java and the Blueprints API. The loading of many existing file formats
are inefficient because doing so requires XML parsing, which in turn exercises
Java's garbage collector even to the point that it dominates the runtime of the
import process. FGF eliminates this problem by being a concise binary format
optimized for Java in a way that it does not create any unnecessary Java
objects while reading the data part of the file; it only instantiates objects
for the metadata and when reading String-based or generic Object-based
properties. By switching from a popular XML-based graph format, we decreased
the loading time of a large 1 million node graph by almost two orders of
magnitude.


  Design Decisions
--------------------

FGF achieves this speedup in the following three ways: First and foremost, FGF
is a binary format, so we save the overhead of string processing and parsing in
Java, which is quite slow. Parsing allocates a large number of String objects
on the heap, which must be then garbage collected. Strings in Java are
immutable, so the parser cannot easily reuse them. This makes a lot of
difference especially when compared to XML-based file formats.

Second, FGF files are considerably smaller than human-readable files,
especially (but not only) XML, which means that they can be read from disk much
faster than the more conventional formats.

Finally, the vertex and edge IDs are implicit. This further decreases the size
of the file, which helps to some extent. But the real advantage of this is that
this allows the ingest routines to map the IDs in the file to the corresponding
IDs in the database using an array instead of (for example) a HashMap. We chose
to do this because almost all database products that we used do not let the
users to specify their own vertex or edge IDs, but the database assigns them
automatically. If the database allows custom IDs, making the IDs implicit in
the file is not necessary.

Another design decision, which does not have as much effect on ingest
performance, is to store the vertices and the edges of the same type together.
The current implementation does not yet take an advantage of this, but we made
this decision so that we can further optimize ingest to DEX in the future. On
the other hand, this makes creating new FGF files more complicated and less
efficient, because we first have to sort the vertices and edges by their
respective types before writing them to the file. This is also the main reason
why we need a separate metadata section of the file with all the counts. We
might revisit this design decision in the next version of the file format.


  Features
------------

FGF supports:
  - vertex types
  - edge types
  - typed properties
  - ability to split a FGF file into two or more files


  Limitations
---------------

The file format requires that the vertex and edge IDs are consecutive long
integers. This limitation is by design, because it allows us to store the graph
more concisely.


  File Format
---------------

All integers are stored in the big-endian byte order. Strings are written
by first writing a 2 byte length followed by UTF-8 encoded characters.

Header:
  4 bytes: "FGF" (3 bytes) and one byte for version, "1" for version 1
  8 bytes: The number of bytes from the end of this field to the end of this
           header section
  8 bytes: The initial vertex ID
  8 bytes: The initial edge ID

Object counts:
  4 bytes: "CNTS"
  8 bytes: The number of property types (e.g. "name", "age", etc.)
  8 bytes: The number of vertex types
  For each vertex type:
    UTF-8 encoded name of the type
    8 bytes: The number of vertices of that type
  8 bytes: The number of edge types
  For each edge type:
    UTF-8 encoded name of the type
    8 bytes: The number of edges of that type

Attributes:
  4 bytes: "ATTR"
  For each attribute (property) type:
    UTF-8 encoded name of the property
    2 bytes: property type code:
      - 0x00: other (written using Java's ObjectOutputStream)
      - 0x01: a UTF-8 encoded string
      - 0x10: boolean
      - 0x11: short
      - 0x12: integer
      - 0x13: long
      - 0x20: float
      - 0x21: double

Vertices:
  For each vertex type (stored using Java's ObjectOutputStream):
    4 bytes: "NODE"
    UTF-8 encoded name of the vertex type
    For each vertex of the given type:
      1 byte: the number of attributes (key-value pairs). If this number is
              greater than or equal to 0xFF (Byte.MAX_VALUE in Java), then
              0xFF followed an 8-byte integer with the actual number
      For each attribute:
        1 byte: the attribute type ID (an array index to the "Attributes"
                section). If this number is greater than or equal to 0xFF, then
                0xFF followed by an 8-byte integer with the actual number.
        The attribute value according to its type.

Edges:
  For each edge type (stored using Java's ObjectOutputStream):
    4 byte: "EDGE"
    UTF-8 encoded name of the edge type
    For each edge of the given type:
      8 bytes: the head vertex ID
      8 bytes: the tail vertex ID
      1 byte : the number of attributes (key-value pairs). If this number is
               greater than or equal to 0xFF (Byte.MAX_VALUE in Java), then
               0xFF followed an 8-byte integer with the actual number
      For each attribute:
        1 byte: the attribute type ID (an array index to the "Attributes"
                section). If this number is greater than or equal to 0xFF, then
                0xFF followed by an 8-byte integer with the actual number.
        The attribute value according to its type.

Footer:
  4 bytes: "ENDG"

